// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "ScreenshotApi.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}



@interface FLTScreenshotHostApiCodecReader : FlutterStandardReader
@end
@implementation FLTScreenshotHostApiCodecReader
@end

@interface FLTScreenshotHostApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTScreenshotHostApiCodecWriter
@end

@interface FLTScreenshotHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTScreenshotHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTScreenshotHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTScreenshotHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTScreenshotHostApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTScreenshotHostApiCodecReaderWriter *readerWriter = [[FLTScreenshotHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLTScreenshotHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTScreenshotHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ScreenshotHostApi.takeScreenshot"
        binaryMessenger:binaryMessenger
        codec:FLTScreenshotHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(takeScreenshotWithCompletion:)], @"FLTScreenshotHostApi api (%@) doesn't respond to @selector(takeScreenshotWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api takeScreenshotWithCompletion:^(FlutterStandardTypedData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ScreenshotHostApi.startListeningScreenshot"
        binaryMessenger:binaryMessenger
        codec:FLTScreenshotHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startListeningScreenshotWithError:)], @"FLTScreenshotHostApi api (%@) doesn't respond to @selector(startListeningScreenshotWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api startListeningScreenshotWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ScreenshotHostApi.stopListeningScreenshot"
        binaryMessenger:binaryMessenger
        codec:FLTScreenshotHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopListeningScreenshotWithError:)], @"FLTScreenshotHostApi api (%@) doesn't respond to @selector(stopListeningScreenshotWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopListeningScreenshotWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTScreenshotFlutterApiCodecReader : FlutterStandardReader
@end
@implementation FLTScreenshotFlutterApiCodecReader
@end

@interface FLTScreenshotFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTScreenshotFlutterApiCodecWriter
@end

@interface FLTScreenshotFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTScreenshotFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTScreenshotFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTScreenshotFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTScreenshotFlutterApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTScreenshotFlutterApiCodecReaderWriter *readerWriter = [[FLTScreenshotFlutterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface FLTScreenshotFlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTScreenshotFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onTakeScreenshotData:(nullable FlutterStandardTypedData *)arg_data completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.ScreenshotFlutterApi.onTakeScreenshot"
      binaryMessenger:self.binaryMessenger
      codec:FLTScreenshotFlutterApiGetCodec()];
  [channel sendMessage:@[arg_data ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
